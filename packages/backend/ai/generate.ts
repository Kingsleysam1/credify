import axios from "axios";
import pinataSDK from "@pinata/sdk";
import { keccak256, toUtf8Bytes } from "ethers";
import dotenv from "dotenv";
import { registerContentOnChain } from "../contract/registerContent";
import { uploadToPinata } from "../ipfs/pinata";
import { Readable } from "stream";

dotenv.config();

// ‚úÖ Initialize Pinata
const pinata = new pinataSDK(
  process.env.PINATA_API_KEY!,
  process.env.PINATA_API_SECRET!
);

export async function generateAIContentAndStore(prompt: string, creator?: string) {
  const timeStamp = Date.now();
  const creatorAddress = creator || "0x0000000000000000000000000000000000000000";
  const model = "deepseek-r1"; // ‚úÖ set your preferred model here

  let content = "";

  try {
    const response = await fetch("http://localhost:11434/api/generate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ model, prompt, stream: true }),
    });

    if (!response.ok || !response.body) {
      throw new Error(`Ollama stream failed: ${response.statusText}`);
    }

    const reader = response.body.getReader();
    const decoder = new TextDecoder();

    while (true) {
      const { done, value } = await reader.read();
      if (done) break;

      const chunk = decoder.decode(value, { stream: true });

      for (const line of chunk.split("\n")) {
        if (line.trim() === "" || !line.startsWith("data:")) continue;
        const data = JSON.parse(line.replace("data: ", ""));
        if (data.response) content += data.response;
      }
    }

    content = content.trim();
    if (!content) throw new Error("No content was generated by Ollama.");

    console.log("üß† AI generated content:", content.slice(0, 200) + "...");
  } catch (err: any) {
    console.error("‚ùå Ollama streaming error:", err.message || err);
    throw err;
  }

  // ‚úÖ 2. Pin to IPFS
  const payload = { prompt, content, creator: creatorAddress, timeStamp };
  const result = await pinata.pinJSONToIPFS(payload);
  const ipfsHash = result.IpfsHash;

 const hashInput = `${content}-${creatorAddress}-${timeStamp}`;
const contentHash = keccak256(toUtf8Bytes(content.trim().toLowerCase()));
const metadata = await getContentByHash(contentHash);

  console.log("üìå Content pinned to IPFS:", ipfsHash);
  console.log("üìÑ Content hash:", contentHash);

  // ‚úÖ 4. Register onchain
  const receipt = await registerContentOnChain({
    contentHash,
    prompt,
    response: content,
    ipfsID: ipfsHash,
  });

  return {
    content,
    ipfsHash,
    contentHash,
    payload,
    txHash: receipt.hash,
    timeStamp,
  };
}
